<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'course') . '/tests/CourseTestCase.test';

/**
 * Tests for Book support in Course
 */
class CourseObjectBookTestCase extends CourseTestCase {

  public static function getInfo() {
    // Note that getInfo() strings are not translated with t().
    return array(
      'name' => 'Course object book',
      'description' => 'Ensure that book Course object support functions properly.',
      'group' => 'Course',
    );
  }

  function getModules() {
    $modules = parent::getModules();
    $modules[] = 'book';
    $modules[] = 'course_book';
    $modules[] = 'node_access_book';
    return $modules;
  }

  function setUp() {
    parent::setUp();

    $this->book_admin = $this->drupalCreateUser(array('administer nodes') + array_keys(book_permission()));
  }

  function testBookCourseObject() {
    $this->drupalLogin($this->book_admin);

    // Create a course with 1 book.
    $courseNode = $this->createCourseNode();
    $co1 = course_get_course_object('course_book', 'book');
    $co1->setOption('book_tracking', 'all');
    $co1->setCourse($courseNode->nid);
    $co1->setUser($this->book_admin);
    $co1->save();
    $this->assertTrue($co1->getInstanceId() > 0, 'book node created on course object save.');

    // Enroll the user in the course
    course_enroll($courseNode, $this->book_admin);

    // Add some more book pages.
    $bp1 = $this->drupalCreateNode(array(
      'type' => 'book',
      'book' => array(
        'bid' => $co1->getInstanceId(),
      ),
    ));

    $bp2 = $this->drupalCreateNode(array(
      'type' => 'book',
      'book' => array(
        'bid' => $co1->getInstanceId(),
      ),
    ));

    // Test fulfillment tracking, set to view all pages before complete.
    $this->assertFalse($co1->getFulfillment()->isComplete(), 'Check that book object is not complete.');

    // Visit the book parent
    $this->drupalGet("node/" . $co1->getInstanceId());
    // Visit the first book page
    $this->drupalGet("node/{$bp1->nid}");

    // Test that course object is not yet complete.
    $co1 = course_get_course_object_by_id($co1->getId(), $this->book_admin);
    $this->assertFalse($co1->getFulfillment()->isComplete(), 'Check that book object is not complete after visiting 2/3 pages.');


    $this->drupalGet("node/{$bp2->nid}");
    // Reload course object
    $co1 = course_get_course_object_by_id($co1->getId(), $this->book_admin);
    $this->assertTrue($co1->getFulfillment()->isComplete(), 'Check that book object is now complete after visiting 3/3 pages.');
  }

  /**
   * Books have special behavior when it comes to content access. All the
   * sub pages should be protected.
   */
  function testBookCourseObjectContentAccess() {
    $this->drupalLogin($this->book_admin);

    // Create a course with 1 book.
    $courseNode = $this->createCourseNode();
    $co1 = course_get_course_object('course_book', 'book');
    $co1->setCourse($courseNode->nid);
    // Set to private.
    $co1->setOption('private', 1);
    $co1->save();

    // Add some more book pages.
    $bp1 = $this->drupalCreateNode(array(
      'type' => 'book',
      'book' => array(
        'bid' => $co1->getInstanceId(),
      ),
    ));

    $bp2 = $this->drupalCreateNode(array(
      'type' => 'book',
      'book' => array(
        'bid' => $co1->getInstanceId(),
      ),
    ));

    // Try to visit the protected pages.
    $this->drupalLogin($this->student_user);
    $this->drupalGet("node/$bp1->nid");
    $this->assertResponse(403);
    $this->drupalGet("node/$bp2->nid");
    $this->assertResponse(403);

    // Add a new page to the book, after it is already saved.
    $this->drupalLogin($this->book_admin);
    $bp3 = $this->drupalCreateNode(array(
      'type' => 'book',
      'book' => array(
        'bid' => $co1->getInstanceId(),
      ),
    ));

    // Check that the new book page also had it's ACL set up.
    $this->drupalLogin($this->student_user);
    $this->drupalGet("node/$bp3->nid");
    $this->assertResponse(403);

    // Enroll the user in the course and go to the first object.
    course_enroll($courseNode, $this->student_user);
    $this->drupalGet("node/{$courseNode->nid}/course-object/" . $co1->getId());

    // Make sure user can access all the sub-pages now.
    $this->drupalGet("node/$bp1->nid");
    $this->assertResponse(200);
    $this->drupalGet("node/$bp2->nid");
    $this->assertResponse(200);
    $this->drupalGet("node/$bp3->nid");
    $this->assertResponse(200);
  }

}
